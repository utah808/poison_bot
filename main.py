from aiogram import Bot, Dispatcher, executor, types
import re
import gspread
from google.oauth2.service_account import Credentials
from config import BOT_TOKEN
from cny_rate import get_cny_rate
from utils import calculate_price

# === Google Sheets ===
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
CREDS = Credentials.from_service_account_file(
    'poizonbot-465106-909673b2e2e6.json', scopes=SCOPES
)
SPREADSHEET_ID = '13l_Lmo9rO8DEjN2K6_NFP4yIHGkIWiGf7rxfhAYdy0o'
SHEET_NAME = 'Orders'
gc = gspread.authorize(CREDS)
sheet = gc.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)

# === Bot ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("–û–±—É–≤—å", "–û–¥–µ–∂–¥–∞", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã")
main_kb.add("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
main_kb.add("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

# /start
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=main_kb)

# –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
@dp.message_handler(lambda msg: msg.text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
async def restart(message: types.Message):
    uid = message.from_user.id
    user_data.pop(uid, None)
    await start_cmd(message)

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
@dp.message_handler(lambda msg: msg.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
async def cancel(message: types.Message):
    uid = message.from_user.id
    user_data.pop(uid, None)
    await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_kb)

# –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º (—Å—Ç–∞–≤–∏–º –ü–ï–†–ï–î handle_all!)
@dp.message_handler(lambda msg: msg.text == "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
async def contact_admin(message: types.Message):
    await message.answer("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @utah808")

# –ö–∞—Ç–µ–≥–æ—Ä–∏—è
@dp.message_handler(lambda msg: msg.text in ["–û–±—É–≤—å", "–û–¥–µ–∂–¥–∞", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"])
async def category_chosen(message: types.Message):
    uid = message.from_user.id
    user_data[uid] = {"category": message.text.lower()}
    await message.answer("üìé –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:")

# –õ–æ–≤–∏–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
@dp.message_handler(lambda msg: True)
async def handle_all(message: types.Message):
    uid = message.from_user.id

    # –†–∞–∑–º–µ—Ä
    if uid in user_data and user_data[uid].get("link") and not user_data[uid].get("size"):
        user_data[uid]["size"] = message.text.strip()
        await message.answer("üé® –£–∫–∞–∂–∏ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:")
        return

    # –¶–≤–µ—Ç
    if uid in user_data and user_data[uid].get("size") and not user_data[uid].get("color"):
        user_data[uid]["color"] = message.text.strip()
        await message.answer("üí¥ –£–∫–∞–∂–∏ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö:")
        return

    # –¶–µ–Ω–∞
    if uid in user_data and user_data[uid].get("color") and not user_data[uid].get("price_yuan"):
        if not message.text.strip().isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 699")
            return
        price_yuan = int(message.text.strip())
        user_data[uid]["price_yuan"] = price_yuan

        cny = get_cny_rate()
        category = user_data[uid]["category"]
        raw_final_price, weight = calculate_price(price_yuan, cny, category)

        delivery_price = round(weight * 700)
        final_price = round(raw_final_price + delivery_price)

        user_data[uid]["price_rub"] = final_price
        user_data[uid]["weight"] = weight

        await message.answer(
            f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: {cny}‚ÇΩ\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –£—Å—Å—É—Ä–∏–π—Å–∫–∞: {delivery_price}‚ÇΩ\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {final_price}‚ÇΩ\n\n"
            f"üì¶ –í–∞–∂–Ω–æ: –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –≤–∞—à –≥–æ—Ä–æ–¥ –ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ!\n\n"
            f"‚úèÔ∏è –í–≤–µ–¥–∏ –§–ò–û:"
        )
        return

    # –§–ò–û
    if uid in user_data and user_data[uid].get("price_rub") and not user_data[uid].get("fio"):
        user_data[uid]["fio"] = message.text.strip()
        await message.answer("üìû –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return

    # –¢–µ–ª–µ—Ñ–æ–Ω
    if uid in user_data and user_data[uid].get("fio") and not user_data[uid].get("phone"):
        user_data[uid]["phone"] = message.text.strip()
        await message.answer("üè† –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        return

    # –ê–¥—Ä–µ—Å
    if uid in user_data and user_data[uid].get("phone") and not user_data[uid].get("address"):
        user_data[uid]["address"] = message.text.strip()
        await message.answer("üì¨ –í–≤–µ–¥–∏ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:")
        return

    # –ò–Ω–¥–µ–∫—Å
    if uid in user_data and user_data[uid].get("address") and not user_data[uid].get("index"):
        user_data[uid]["index"] = message.text.strip()

        # –ó–∞–ø–∏—Å—å
        data = user_data[uid]
        row = [
            data.get("fio") or "", data.get("phone") or "", data.get("address") or "", data.get("index") or "",
            data.get("link") or "", data.get("size") or "", data.get("color") or "",
            data.get("price_yuan") or "", data.get("price_rub") or "", data.get("weight") or ""
        ]
        sheet.append_row(row, value_input_option='USER_ENTERED')

        await message.answer("‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=main_kb)
        user_data.pop(uid, None)
        return

    # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏
    if uid not in user_data or not user_data[uid].get("link"):
        url_match = re.search(r'(https?://\S+)', message.text)
        if not url_match:
            await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
            return
        link = url_match.group(1)
        user_data.setdefault(uid, {})["link"] = link
        await message.answer(f"üîó –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {link}\n\nüìè –í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä:")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


    





