from aiogram import Bot, Dispatcher, executor, types
import re
import gspread
from google.oauth2.service_account import Credentials
from config import BOT_TOKEN
from cny_rate import get_cny_rate
from utils import calculate_price

# === Google Sheets ===
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
CREDS = Credentials.from_service_account_file(
    'poizonbot-465106-909673b2e2e6.json', scopes=SCOPES
)
SPREADSHEET_ID = '13l_Lmo9rO8DEjN2K6_NFP4yIHGkIWiGf7rxfhAYdy0o'
SHEET_NAME = 'Orders'
gc = gspread.authorize(CREDS)
sheet = gc.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)

# === Bot ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–∫–æ–Ω–∫–∞–º–∏
main_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üëü –û–±—É–≤—å", "üëï –û–¥–µ–∂–¥–∞", "üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã")
main_kb.add("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
main_kb.add("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

# /start —Å –Ω–æ–≤—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    uid = message.from_user.id
    user_data[uid] = {"items": []}
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî PoisonBot.\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –¥–ª—è –∑–∞–∫–∞–∑–∞ –±—Ä–µ–Ω–¥–æ–≤—ã—Ö –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π —Å Poizon üá®üá≥.\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —Å –¥—Ä—É–≥–∏—Ö –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏–ª–∏ –æ–ø—Ç–æ–º ‚Äî –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        "üì¶ –°–æ–±–∏—Ä–∞–π —Å–≤–æ–π –∑–∞–∫–∞–∑ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –ø—Ä—è–º–æ –∑–¥–µ—Å—å.\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏!",
        reply_markup=main_kb
    )

# –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –∏–∫–æ–Ω–∫–æ–π
@dp.message_handler(lambda msg: msg.text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
async def restart(message: types.Message):
    uid = message.from_user.id
    user_data.pop(uid, None)
    await start_cmd(message)

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å –∏–∫–æ–Ω–∫–æ–π
@dp.message_handler(lambda msg: msg.text == "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
async def cancel(message: types.Message):
    uid = message.from_user.id
    user_data.pop(uid, None)
    await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_kb)

# –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º
@dp.message_handler(lambda msg: msg.text == "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
async def contact_admin(message: types.Message):
    await message.answer("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @utah808")

# –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –∏–∫–æ–Ω–∫–∞–º–∏
@dp.message_handler(lambda msg: msg.text in ["üëü –û–±—É–≤—å", "üëï –û–¥–µ–∂–¥–∞", "üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"])
async def category_chosen(message: types.Message):
    uid = message.from_user.id
    if "items" not in user_data.get(uid, {}):
        user_data[uid] = {"items": []}

    if len(user_data[uid]["items"]) >= 5:
        await message.answer("‚ùå –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º—É–º 5 —Ç–æ–≤–∞—Ä–æ–≤! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é.")
        await proceed_to_checkout(message)
        return

    category_name = message.text.split(" ")[1].lower()
    user_data[uid]["current"] = {"category": category_name}
    await message.answer("üìé –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:")

# –õ–æ–≤–∏–º –≤—Å—ë
@dp.message_handler(lambda msg: True)
async def handle_all(message: types.Message):
    uid = message.from_user.id
    data = user_data.get(uid, {})
    current = data.get("current")

    if data.get("proceeding"):
        if message.text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑":
            data["ready_for_details"] = True
            await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –§–ò–û:")
            return

        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
            user_data.pop(uid, None)
            await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_kb)
            return

        if data.get("ready_for_details"):
            if "fio" not in data:
                data["fio"] = message.text.strip()
                await message.answer("üìû –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
                return

            elif "phone" not in data:
                data["phone"] = message.text.strip()
                await message.answer("üè† –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
                return

            elif "address" not in data:
                data["address"] = message.text.strip()
                await message.answer("üì¨ –í–≤–µ–¥–∏ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:")
                return

            elif "index" not in data:
                data["index"] = message.text.strip()
                await save_order(uid, message)
                return

    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä":
        await message.answer("üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=main_kb)
        return

    if message.text == "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é":
        await proceed_to_checkout(message)
        return

    if not current:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.", reply_markup=main_kb)
        return

    if "link" not in current:
        url_match = re.search(r'(https?://\S+)', message.text)
        if not url_match:
            await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
            return
        current["link"] = url_match.group(1)
        await message.answer("üìè –í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:")
        return

    if "size" not in current:
        current["size"] = message.text.strip()
        await message.answer("üé® –£–∫–∞–∂–∏ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:")
        return

    if "color" not in current:
        current["color"] = message.text.strip()
        await message.answer("üí¥ –£–∫–∞–∂–∏ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö:")
        return

    if "price_yuan" not in current:
        if not message.text.strip().isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 699")
            return

        price_yuan = int(message.text.strip())
        cny = get_cny_rate()
        final_price, weight = calculate_price(price_yuan, cny, current["category"])
        delivery_price = round(weight * 700)
        total_price = round(final_price + delivery_price)

        current.update({
            "price_yuan": price_yuan,
            "price_rub": total_price,
            "weight": weight
        })

        user_data[uid]["items"].append(current)
        user_data[uid].pop("current", None)

        if len(user_data[uid]["items"]) >= 5:
            await message.answer("‚úÖ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º—É–º 5 —Ç–æ–≤–∞—Ä–æ–≤! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞.")
            await proceed_to_checkout(message)
            return

        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä", "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é")
        await message.answer(
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä: {total_price}‚ÇΩ\n"
            f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ!\n\n"
            f"–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=kb
        )
        return

# –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å —ç–º–æ–¥–∑–∏
async def proceed_to_checkout(message):
    uid = message.from_user.id
    user_data[uid]["proceeding"] = True
    user_data[uid]["ready_for_details"] = False

    total = 0
    total_delivery = 0
    cny = get_cny_rate()
    summary = []

    category_icons = {
        "–æ–±—É–≤—å": "üëü",
        "–æ–¥–µ–∂–¥–∞": "üß•",
        "–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã": "üéí"
    }

    for item in user_data[uid]["items"]:
        icon = category_icons.get(item['category'], "üì¶")
        delivery = round(item["weight"] * 700)
        total += item["price_rub"]
        total_delivery += delivery

        summary.append(
            f"{icon} {item['category'].capitalize()}: {item['link']}\n"
            f"–†–∞–∑–º–µ—Ä: {item['size']}, –¶–≤–µ—Ç: {item['color']}, –¶–µ–Ω–∞: {item['price_yuan']} —é–∞–Ω–µ–π"
        )

    text = "\n\n".join(summary)

    await message.answer(
        f"üõí –¢–æ–≤–∞—Ä—ã:\n{text}\n\n"
        f"üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: {cny}‚ÇΩ\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –£—Å—Å—É—Ä–∏–π—Å–∫–∞: {total_delivery}‚ÇΩ\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ!",
        disable_web_page_preview=True
    )

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
    await message.answer("–ü—Ä–æ–≤–µ—Ä—å —Ä–∞—Å—á—ë—Ç—ã –∏ –≤—ã–±–µ—Ä–∏, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:", reply_markup=kb)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –∫—Ä–∞—Å–∏–≤–æ: –∫–∞–∂–¥–∞—è –≤–µ—â—å ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
async def save_order(uid, message):
    data = user_data[uid]

    for item in data["items"]:
        row = [
            data["fio"],
            data["phone"],
            data["address"],
            data["index"],
            item["category"],
            item["link"],
            item["size"],
            item["color"],
            item["price_yuan"],
            item["price_rub"],
            item["weight"]
        ]
        sheet.append_row(row, value_input_option='USER_ENTERED')

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=main_kb)
    user_data.pop(uid, None)

# –õ–æ–≤–∏–º –ª—é–±–æ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(lambda msg: msg.text not in [
    "üëü –û–±—É–≤—å", "üëï –û–¥–µ–∂–¥–∞", "üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
    "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
    "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä", "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é",
    "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"
])
async def unknown_message(message: types.Message):
    await message.answer(
        "‚ùì –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_kb
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)








    





